name: Build macOS App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install Qt dependencies
      run: |
        brew install qt@5
        brew link qt@5
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        # 使用预编译的PyQt5二进制包
        pip install --only-binary :all: PyQt5==5.15.9 PyQt5-Qt5==5.15.2 PyQt5-sip==12.16.1
        # 安装其他依赖，但排除PyQt5相关包
        grep -v "PyQt5" requirements.txt | grep -v "qt5-" | pip install -r /dev/stdin
        pip install pyinstaller
        
    - name: Download spaCy model
      run: |
        python -m spacy download en_core_web_sm
        # 获取spacy模型路径
        SPACY_PATH=$(python -c "import en_core_web_sm; print(en_core_web_sm.__path__[0])")
        echo "SPACY_MODEL_PATH=$SPACY_PATH" >> $GITHUB_ENV
        
    - name: Create .spec file
      run: |
        echo 'from PyInstaller.utils.hooks import collect_data_files, collect_submodules

        block_cipher = None
        
        hidden_imports = collect_submodules("spacy")
        hidden_imports.extend([
            "spacy",
            "spacy.lang.en",
            "spacy.lang.en.examples",
            "spacy.lang.en.stop_words",
            "spacy.tokens",
            "spacy.tokens.doc",
            "spacy.tokens.token",
            "spacy.vocab",
            "spacy.lexeme",
            "spacy.strings",
            "spacy.parts_of_speech",
            "thinc",
            "cymem",
            "preshed",
            "murmurhash",
            "numpy.core._multiarray_umath",
            "numpy.core._multiarray_tests"
        ])

        # 收集所有spacy相关的数据文件
        datas = []
        datas.extend(collect_data_files("spacy"))
        datas.extend(collect_data_files("en_core_web_sm"))
        datas.extend(collect_data_files("thinc"))

        a = Analysis(
            ["词性分析最后1.py"],
            pathex=[],
            binaries=[],
            datas=datas,
            hiddenimports=hidden_imports,
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )

        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name="词性分析工具",
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=False,
            disable_windowed_traceback=False,
            argv_emulation=True,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )

        app = BUNDLE(
            exe,
            name="词性分析工具.app",
            bundle_identifier="com.shajia.phraseanalyzer",
            info_plist={
                "CFBundleShortVersionString": "1.0.0",
                "CFBundleVersion": "1.0.0",
                "NSHighResolutionCapable": True,
                "LSMinimumSystemVersion": "10.13.0",
            },
        )' > build.spec

    - name: Build macOS app
      run: |
        pyinstaller build.spec
        
    - name: Create DMG
      run: |
        brew install create-dmg
        create-dmg \
          --volname "词性分析工具" \
          --window-pos 200 120 \
          --window-size 600 400 \
          --icon-size 100 \
          --icon "词性分析工具.app" 175 120 \
          --hide-extension "词性分析工具.app" \
          --app-drop-link 425 120 \
          "词性分析工具.dmg" \
          "dist/词性分析工具.app"
      
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: macOS-app
        path: |
          dist/词性分析工具.app
          词性分析工具.dmg

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          词性分析工具.dmg
        name: Release ${{ github.sha }}
        tag_name: v${{ github.run_number }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
